Ques:
You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Code:
 Brute force(with space-complexity):
  -make a dummy node as null;'
  -find out the smallest of head1 and head2;
  -put the smallest one in dummy ka next;
  -and increse smallest one by its next;
  
  Time-complexity: O(n+m) if n amd m are the size of linkedlist1 and linkedlist2
  Space-complexity: O(n+m)
  
  class solution{
   public ListNode mergeList(ListNode l1, ListNode l2){
     if(l1==null) return l2;
     if(l2==null) return l1;
     ListNode dummy=new ListNode(0);
     while(l1!=null || l2!=null){
      if(l1.val<l2.val){
        dummy.next=l1;
        l1=l1.next;
      }
      if(l1.val>l2.val){
        dummy.next=l2;
        l2=l2.next;
      }
     }
     return dummy.next;
   }
   
   
  Optimised solution:
   Time-complexity: O(n+m)
   Space-complexity: O(1)
   
   class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null) return list2;
        if(list2==null) return list1;
        if(list1.val>list2.val){
            ListNode tmp=list1;
            list1=list2;
            list2=tmp;
        }
        ListNode res=list1;
        while(list1!=null && list2!=null){
            ListNode temp=null;
            while(list1!=null && (list1.val<=list2.val)){
                temp=list1;
                list1=list1.next;
            }
            temp.next=list2;
            ListNode tmp=list1;
            list1=list2;
            list2=tmp;
        }
        return res;
    }
}

  Recursive solution:
  
  Time-complexity: O(n+m)
  class solution{
    public ListNode merge(ListNode l1, ListNode l2){
      if(l1==null) return l2;
      if(l2==null) return l1;
      
      if(l1.val<l2.val){
       ListNode newHead=merge(l1.next,l2);
       return l1;
     }
     else{
      ListNode newHead=merge(l1,l2.next);
       return l2;
     }
   }
   public ListNode mergeList(ListNode l1, ListNode l2){
     ListNode newHead=merge(l1,l2);
     return newHead;
   }
